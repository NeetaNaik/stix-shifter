Metadata-Version: 2.1
Name: onecache
Version: 0.3.1
Summary: Python cache for sync and async code
Author: Johanderson Mogollon
Author-email: johander1822@gmail.com
License: MIT
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: Implementation :: PyPy
Description-Content-Type: text/markdown
Provides-Extra: test
Requires-Dist: astroid ==2.6.2 ; extra == 'test'
Requires-Dist: attrs ==21.2.0 ; extra == 'test'
Requires-Dist: autopep8 ==1.5.7 ; extra == 'test'
Requires-Dist: certifi ==2021.5.30 ; extra == 'test'
Requires-Dist: charset-normalizer ==2.0.2 ; extra == 'test'
Requires-Dist: coverage ==5.5 ; extra == 'test'
Requires-Dist: coveralls ==3.1.0 ; extra == 'test'
Requires-Dist: docopt ==0.6.2 ; extra == 'test'
Requires-Dist: flake8 ==3.9.2 ; extra == 'test'
Requires-Dist: flake8-docstrings ==1.6.0 ; extra == 'test'
Requires-Dist: idna ==3.2 ; extra == 'test'
Requires-Dist: iniconfig ==1.1.1 ; extra == 'test'
Requires-Dist: isort ==5.9.2 ; extra == 'test'
Requires-Dist: lazy-object-proxy ==1.6.0 ; extra == 'test'
Requires-Dist: mccabe ==0.6.1 ; extra == 'test'
Requires-Dist: packaging ==21.0 ; extra == 'test'
Requires-Dist: pluggy ==0.13.1 ; extra == 'test'
Requires-Dist: py ==1.10.0 ; extra == 'test'
Requires-Dist: pycodestyle ==2.7.0 ; extra == 'test'
Requires-Dist: pydocstyle ==6.1.1 ; extra == 'test'
Requires-Dist: pyflakes ==2.3.1 ; extra == 'test'
Requires-Dist: pylint ==2.9.3 ; extra == 'test'
Requires-Dist: pyparsing ==2.4.7 ; extra == 'test'
Requires-Dist: pytest ==6.2.4 ; extra == 'test'
Requires-Dist: pytest-asyncio ==0.15.1 ; extra == 'test'
Requires-Dist: pytest-cov ==2.12.1 ; extra == 'test'
Requires-Dist: pytest-sugar ==0.9.4 ; extra == 'test'
Requires-Dist: requests ==2.26.0 ; extra == 'test'
Requires-Dist: snowballstemmer ==2.1.0 ; extra == 'test'
Requires-Dist: termcolor ==1.1.0 ; extra == 'test'
Requires-Dist: toml ==0.10.2 ; extra == 'test'
Requires-Dist: urllib3 ==1.26.6 ; extra == 'test'
Requires-Dist: wrapt ==1.12.1 ; extra == 'test'

[![Coverage Status](https://coveralls.io/repos/github/sonic182/onecache/badge.svg?branch=master)](https://coveralls.io/github/sonic182/onecache?branch=master)
![github status](https://github.com/sonic182/onecache/actions/workflows/python.yml/badge.svg)
# OneCache

Python cache for sync and async code.

Cache uses LRU algoritm. Cache can optionally have TTL.

Tested in python 3.6 and 3.9, for windows, mac and linux (see github status badge), it should work in versions between them.

# Usage

```python
from onecache import CacheDecorator
from onecache import AsyncCacheDecorator


class Counter:
    def __init__(self, count=0):
        self.count = count


@pytest.mark.asyncio
async def test_async_cache_counter():
    """Test async cache, counter case."""
    counter = Counter()

    @AsyncCacheDecorator()
    async def mycoro(counter: Counter):
        counter.count += 1
        return counter.count

    assert 1 == (await mycoro(counter))
    assert 1 == (await mycoro(counter))


def test_cache_counter():
    """Test async cache, counter case."""
    counter = Counter()

    @CacheDecorator()
    def mycoro(counter: Counter):
        counter.count += 1
        return counter.count

    assert 1 == (mycoro(counter))
    assert 1 == (mycoro(counter))
```

Decorator classes supports the following arguments

* **maxsize (int)**: Maximun size of cache. default: 512
* **ttl (int)**: time to expire in milliseconds, if None, it does not expire. default: None
* **skip_args (bool)**: apply cache as the function doesn't have any arguments, default: False
* **cache_class (class)**: Class to use for cache instance. default: LRUCache
* **refresh_ttl (bool)**: if cache with ttl, This flag makes key expiration timestamp to be refresh per access. default: False

If num of records exceds maxsize, it drops the oldest.


# TODO

* LRU cache

# Development

Install packages with pip-tools:
```bash
pip install pip-tools
pip-compile
pip-compile dev-requirements.in
pip-sync requirements.txt dev-requirements.txt
```

# Contribute

1. Fork
2. create a branch `feature/your_feature`
3. commit - push - pull request

Thanks :)
