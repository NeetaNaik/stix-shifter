
# Generated by WCA for GP
import sys
import json
import math
from os import path

def compare_json():
    """
    Compare two JSON files and return a list of keys that exist in both files and a list of keys that exist in the first file but not in the second file.

    Parameters:
    from_stix_map_json (str): The path to the second JSON file.

    Returns:
    list: A list of keys that exist in both files.
    list: A list of keys that exist in the first file but not in the second file.
    """

    # The name of the module to validate
    stix_shifter_module = sys.argv[1]

    # A string of comma delimiated dialects used by the connector. Use 'default' if only using the default dialect
    dialects = sys.argv[2]

    # A list of dialects, possibly with just 'default'
    dialect_list =  dialects.split(",")

    current_dir = path.abspath(path.dirname(__file__))

    CONNECTOR_MODULE_JSON_PATH = path.abspath(path.join(current_dir, "../../../stix_shifter_modules", stix_shifter_module, "stix_translation/json"))

    # Read the STIX cyber observable schema
    with open("stix_cyber_observables.json", "r") as stix_cybox_schema_file:
        stix_cybox_schema = json.load(stix_cybox_schema_file)

        print(dialect_list)

    for dialect in dialect_list:

        if dialect == 'default':
            dialect = ''
        else:
            dialect = dialect + '_'


        mapping_json = path.abspath(path.join(CONNECTOR_MODULE_JSON_PATH, "{}from_stix_map.json".format(dialect)))

        with open(mapping_json, "r") as from_stix_map_file:
            from_stix_mappings = json.load(from_stix_map_file)

        cybox_schema_objects = stix_cybox_schema.keys()
        cybox_map_objects = from_stix_mappings.keys()

        keys_in_both = []
        map_keys_not_in_schema = []
        cybox_properties_not_in_schema = {}
        cybox_properties_in_schema = {}

        for key in cybox_map_objects:
            if key in cybox_schema_objects:
                cybox_properties_in_schema[key] = []
                cybox_properties_not_in_schema[key] = []
                keys_in_both.append(key)
                
                # Generated by WCA for GP
                # Get a list of STIX properties for each cybox object in the mapping
                for cybox_property in from_stix_mappings[key]["fields"].keys():
                    cybox_property = cybox_property.split(".")[0]
                    # Remove case where mapped property is a list
                    if "[*]" in cybox_property:
                        cybox_property = cybox_property.split("[")[0]
                    if cybox_property in stix_cybox_schema[key]:
                        cybox_properties_in_schema[key].append(cybox_property)
                    else:
                        cybox_properties_not_in_schema[key].append(cybox_property)


                    # for property in cybox_properties:
                    #     print("LOOKING AT PROPERTY {} for {}".format(cybox_properties, key))
                    #     if cybox_property in stix_cybox_schema[key]:
                    #         cybox_properties_in_schema[key].append(cybox_property)
                    #     else:
                    #         cybox_properties_not_in_schema[key].append(cybox_property)

                    #         # store the properties so we can get a percentage
            else:
                map_keys_not_in_schema.append(key)

        mapped_standard_stix_percentage = (len(keys_in_both)/len(cybox_map_objects)) * 100
        rounded_mapped_standared_percentage = math.floor(mapped_standard_stix_percentage)

        if not dialect:
            dialect = "default"

        print("")
        print("---------------------------------------------------------------")
        print("")
        print("The {} connector's {} dialect from-STIX pattern mapping contains the following STIX Cyber Observable Objects".format(stix_shifter_module, dialect))
        
        for stix_object in keys_in_both:
            print(stix_object)
            print("which contains the following standard STIX properties:")
            print(cybox_properties_in_schema[stix_object])
            if cybox_properties_not_in_schema[stix_object]:
                print("and the following properties not part of the standard STIX schema:")
                print(cybox_properties_not_in_schema[stix_object])
            print("")
        


        print("The mapping also contains the following custom objects found in mapping:")
        print(map_keys_not_in_schema)
        print("The percentage of mapped objectes for the {} dialect that are standard STIX is {}".format(dialect, rounded_mapped_standared_percentage))


if __name__ == "__main__":
    # Call functions here
    compare_json()