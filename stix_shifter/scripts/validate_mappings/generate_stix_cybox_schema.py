import stix2.v20
import json
import re

SKIP_LIST = ['AlternateDataStream', 'AtLeastOnePropertyError', 'BinaryProperty', 'BooleanProperty', 'CustomExtension', 'CustomObservable', 'DependentPropertiesError', 'DictionaryProperty', 'EmbeddedObjectProperty', 'EnumProperty', 'ExtensionsProperty', 'FloatProperty', 'HASHING_ALGORITHM', 'HashesProperty', 'HexProperty', 'IntegerProperty', 'ListProperty', 'ObjectReferenceProperty', 'OrderedDict', 'StringProperty', 'TimestampProperty', 'TypeProperty', 'itertools']

def generate_stix_cybox_json():

    """
    Generates a JSON file containing a list of all the STIX Cyber Observable objects and their properties.

    Returns:
        None
    """

    # Get a string list of all the cyber observable objects in the module's namespace
    stix_objects = dir(stix2.v20.observables)

    # Filter out the stix_objects that are not legitimate cyber observable objects
    stix_objects = [stix_object for stix_object in stix_objects if not stix_object.startswith("_")]
    cleaned_objects = []
    for stix_object in stix_objects:
        if not stix_object.startswith("_") and stix_object not in SKIP_LIST:
            cleaned_objects.append(stix_object)

    stix_objects = cleaned_objects

    output_json = {}

    PATTERN = r"([A-Z][a-z])"
    REGEX = re.compile(PATTERN)


    for stix_object in stix_objects:
        # Get the class object by its name
        cls = getattr(stix2.v20, stix_object)
        schema = cls._properties

        # List of properties for the STIX object
        # Ex. odict_keys(['type', 'value', 'extensions'])
        properties = schema.keys()

        matches = REGEX.findall(stix_object)

        for index, match in enumerate(matches):
            stix_object = re.sub(match, "-" + match, stix_object)
        if stix_object[0] == "-":
            stix_object = stix_object[1:]
        stix_object = stix_object.lower()

        if stix_object == "i-pv4-address":
            stix_object = "ipv4-addr"
        if stix_object == "i-pv6-address":
            stix_object = "ipv6-addr"
        if "address" in stix_object:
            stix_object =  re.sub(r"address", "addr", stix_object)
        if "windowspe-binary" in stix_object:
            stix_object = re.sub(r"windowspe-binary", "windows-pebinary", stix_object)
        if "windowspe-" in stix_object:
            stix_object = re.sub(r"windowspe-", "windows-pe-", stix_object)
        if "x509v3-extensions" in stix_object:
            stix_object = re.sub(r"x509v3-extensions", "x509-v3-extensions", stix_object)
        

        output_json[stix_object.lower()] = eval(re.sub("\)", "", re.sub("odict_keys\(", "", str(properties))))

    # Generated by WCA for GP
    # Write the JSON string to a file
    with open("stix_cyber_observables.json", "w") as file:
        file.write(json.dumps(output_json, indent=4))


if __name__ == "__main__":
    # Call functions here
    generate_stix_cybox_json()
